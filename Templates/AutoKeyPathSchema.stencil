protocol KeyPathSchema {
  static var schema: [PartialKeyPath<Self>] { get }
}

{% for type in types.implementing.AutoKeyPathSchema %}
extension {{type.name}}: KeyPathSchema, Hashable {
  static let schema: [PartialKeyPath<{{type.name}}>] = [
  {% for prop in type.instanceVariables %}	\{{type.name}}.{{prop.name}},{% endfor %}
  ]
}
{% endfor %}

extension Hashable where Self: KeyPathSchema {
  static func ==(a: Self, b: Self) -> Bool {
    for key in Self.schema {
      guard let aValue = a[keyPath: key] as? AnyHashable,
        let bValue = b[keyPath: key] as? AnyHashable,
        aValue == bValue
        else {
          return false
      }
    }
    return true
  }

  var hashValue: Int {
    var hash = unsafeBitCast(Self.self, to: Int.self)
    for key in Self.schema {
      if let value = self[keyPath: key] as? AnyHashable {
        // You should use a real hash combining function here
        hash = hash &* 17 ^ value.hashValue
      }
    }
    return hash
  }
}